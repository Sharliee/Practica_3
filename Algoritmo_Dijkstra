# Carlos Andres Riveramelo Del Toro
# 20310382
# Inteligencia Artificial
# Practica 3: Algoritmo Dijkstra

import networkx as nx
import matplotlib.pyplot as plt

# Definimos el grafo
G = nx.DiGraph()
G.add_weighted_edges_from([(1, 2, 5), (1, 3, 2), (2, 4, 4), (2, 5, 7), (3, 5, 1), (4, 6, 2), (5, 4, 3), (5, 6, 4)])

# Definimos el punto de partida y el punto al que queremos llegar
start = 1
end = 6

# Inicializamos la distancia a todos los nodos en infinito y al punto de partida en 0
distance = {node: float('inf') for node in G.nodes()}
distance[start] = 0

# Aqui checamos el camino mas corto
shortest_path = {node: [] for node in G.nodes()}
shortest_path[start] = [start]

# Iniciamos los nodos no visitados
unvisited = set(G.nodes())

# Mostramos el grafo inicial
pos = nx.spring_layout(G)
nx.draw_networkx_nodes(G, pos, node_size=500)
nx.draw_networkx_edges(G, pos)
nx.draw_networkx_labels(G, pos, font_size=20, font_family='sans-serif')
edge_labels = nx.get_edge_attributes(G, 'weight')
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_size=16)
plt.show()

# Iniciamos el algoritmo
while end in unvisited:
    
    # Aqui ya encontramos la distancia mas corta entre todos los nodos
    current_node = min(unvisited, key=lambda node: distance[node])

    # Actualizamos las distancias
    for neighbor, weight in G[current_node].items():
        new_distance = distance[current_node] + weight['weight']
        if new_distance < distance[neighbor]:
            distance[neighbor] = new_distance
            shortest_path[neighbor] = shortest_path[current_node] + [neighbor]

    # Marcamos el nodo actual como visitado
    unvisited.remove(current_node)

    # Mostramos la grafica
    plt.clf()
    nx.draw_networkx_nodes(G, pos, node_size=500, node_color=['lightgreen' if node == current_node else 'white' for node in G.nodes()])
    nx.draw_networkx_edges(G, pos)
    nx.draw_networkx_labels(G, pos, font_size=20, font_family='sans-serif')
    edge_labels = nx.get_edge_attributes(G, 'weight')
    nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_size=16)
    plt.show(block=False)
    plt.pause(1)

# Aqui ya imprimimos en pantalla la ruta mas corta
print("Mira carnal, la ruta mas corta para llegar de", start, "a", end, "es", shortest_path[end], "con una distancia total de", distance[end])
